# app/streamlit_app.py

import streamlit as st
import pandas as pd
import numpy as np
import joblib
from rdkit import Chem
from rdkit.Chem import Draw
from rdkit.Chem import AllChem
from rdkit.Chem import DataStructs
from PIL import Image

# ----------- Param√®tres de base ----------- #
st.set_page_config(page_title="ADMET Predictor", page_icon="üíä")

st.title("üíä Pr√©diction des Propri√©t√©s ADMET")
st.markdown("Ce prototype utilise un mod√®le de machine learning pour pr√©dire 3 propri√©t√©s ADMET √† partir d'une mol√©cule (SMILES).")

# ----------- Fonctions ----------- #

def smiles_to_morgan_fp(smiles: str, radius: int = 2, n_bits: int = 2048) -> np.ndarray:
    """Convertit une mol√©cule SMILES en empreinte mol√©culaire binaire (vecteur numpy)."""
    mol = Chem.MolFromSmiles(smiles)
    if mol is None:
        return np.zeros(n_bits)
    fp = AllChem.GetMorganFingerprintAsBitVect(mol, radius, nBits=n_bits)
    arr = np.zeros((n_bits,), dtype=int)
    DataStructs.ConvertToNumpyArray(fp, arr)
    return arr

def draw_molecule(smiles: str):
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        return Draw.MolToImage(mol, size=(300, 300))
    return None

@st.cache_resource
def load_model(path: str):
    return joblib.load(path)

# ----------- Interface utilisateur ----------- #

smiles_input = st.text_input("üëâ Entrez une cha√Æne SMILES :", "CC(C)CC1=CC=C(C=C1)C(C)C(=O)O")

if smiles_input:
    mol_img = draw_molecule(smiles_input)
    if mol_img:
        st.image(mol_img, caption="Structure mol√©culaire", use_column_width=False)
    else:
        st.error("‚ö†Ô∏è SMILES invalide. Veuillez r√©essayer.")

    # ----------- Pr√©diction ----------- #
    model = load_model("models/admet_model.pkl")
    features = smiles_to_morgan_fp(smiles_input).reshape(1, -1)

    if model:
        prediction = model.predict(features)[0]
        labels = ["Absorption optimale (Y1)", "Distribution optimale (Y2)", "M√©tabolisme/Excr√©tion non toxique (Y3)"]
        st.subheader("üß† Pr√©dictions ADMET :")
        for label, value in zip(labels, prediction):
            st.success(f"{label} : {'‚úÖ Oui' if value == 1 else '‚ùå Non'}")
    else:
        st.error("Mod√®le introuvable.")
